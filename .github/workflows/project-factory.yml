name: 'Project Factory'

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'project-definitions/**.tfvars'

permissions:
  contents: read
  id-token: write
  pull-requests: write

jobs:
  detect-changes:
    name: 'Detect New Projects'
    runs-on: ubuntu-latest
    outputs:
      new_projects: ${{ steps.detect_new_projects.outputs.new_projects }}

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Detect New TFVars Files'
        id: detect_new_projects
        run: |
          echo "Comparing (BASE) ${{ github.event.pull_request.base.sha }} with (HEAD) ${{ github.event.pull_request.head.sha }}"
          # Detecta solo los ficheros .tfvars que han sido AÃ‘ADIDOS en esta PR.
          new_files=$(git diff --name-only --diff-filter=A ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep 'project-definitions/.*\.tfvars$')

          if [[ -z "$new_files" ]]; then
            echo "No new .tfvars files found in this PR."
            echo "new_projects=[]" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Convertimos la lista de ficheros en un JSON array para el output.
          json_array=$(echo "$new_files" | jq -R . | jq -s .)
          echo "Detected new project files: $json_array"
          echo "new_projects=$json_array" >> $GITHUB_OUTPUT

  plan-and-request-approval:
    name: 'Terraform Plan for ${{ matrix.project_file }}'
    needs: detect-changes
    if: needs.detect-changes.outputs.new_projects != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project_file: ${{ fromJson(needs.detect-changes.outputs.new_projects) }}

    outputs:
      tf_workspace: ${{ steps.prepare_vars.outputs.workspace_name }}
      tf_var_file: ${{ steps.prepare_vars.outputs.var_file }}
      tf_plan_artifact: 'tfplan-${{ steps.prepare_vars.outputs.workspace_name }}-${{ github.event.pull_request.number }}'
      pr_number: ${{ github.event.pull_request.number }}

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: 'Prepare Variables'
        id: prepare_vars
        run: |
          changed_file="${{ matrix.project_file }}"
          echo "Processing file: $changed_file"
          
          # Extraemos el nombre del proyecto del fichero para usarlo como nombre del workspace
          PROJECT_NAME=$(grep -oP 'project_name\s*=\s*"\K[^"]+' $changed_file)
          if [[ -z "$PROJECT_NAME" ]]; then
            echo "Error: No se pudo extraer project_name del fichero .tfvars"
            exit 1
          fi
          echo "âœ… Project name for workspace: $PROJECT_NAME"
          
          # Usamos GITHUB_OUTPUT para pasar valores a otros steps y jobs
          echo "workspace_name=$PROJECT_NAME" >> $GITHUB_OUTPUT
          echo "var_file=$changed_file" >> $GITHUB_OUTPUT

      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: '${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: '${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}'
      
      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v3

      - name: 'Terraform Init'
        run: terraform init -backend-config="bucket=${{ secrets.TFSTATE_BUCKET_NAME }}"
        working-directory: ./terraform

      - name: 'Select or Create Terraform Workspace'
        run: terraform workspace select ${{ steps.prepare_vars.outputs.workspace_name }} || terraform workspace new ${{ steps.prepare_vars.outputs.workspace_name }}
        working-directory: ./terraform

      - name: 'Terraform Validate'
        run: terraform validate
        working-directory: ./terraform

      - name: 'Terraform Plan'
        id: plan
        working-directory: ./terraform
        run: |
          terraform plan \
            -var-file="../${{ steps.prepare_vars.outputs.var_file }}" \
            -out=tfplan \
            -no-color
        env:
          TF_VAR_billing_account: ${{ secrets.TF_VAR_billing_account }}

      - name: 'Publish Plan to PR'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `
            #### Terraform Plan ðŸ“– for \`${{ steps.prepare_vars.outputs.workspace_name }}\`
            * **Project (Workspace):** \`${{ steps.prepare_vars.outputs.workspace_name }}\`
            * **Definition File:** \`${{ steps.prepare_vars.outputs.var_file }}\`
            \`\`\`terraform
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            **Action Required:** A reviewer must [approve the deployment](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) to continue with the \`apply\`.
            `;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      - name: 'Upload Plan Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: 'tfplan-${{ steps.prepare_vars.outputs.workspace_name }}-${{ github.event.pull_request.number }}'
          path: terraform/tfplan

  apply-approved-plan:
    name: 'Terraform Apply for ${{ needs.plan-and-request-approval.outputs.tf_workspace }}'
    runs-on: ubuntu-latest
    needs: plan-and-request-approval
    environment: 'project-approval'
    
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: '${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: '${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}'

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v3

      - name: 'Terraform Init'
        run: terraform init -backend-config="bucket=${{ secrets.TFSTATE_BUCKET_NAME }}"
      
      - name: 'Select Workspace'
        run: terraform workspace select ${{ needs.plan-and-request-approval.outputs.tf_workspace }}
      
      - name: 'Download Plan Artifact'
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.plan-and-request-approval.outputs.tf_plan_artifact }}
          path: terraform/

      - name: 'Terraform Apply'
        run: terraform apply -auto-approve tfplan

      - name: 'Get Terraform Outputs'
        id: get_outputs
        working-directory: ./terraform
        run: terraform output -json

      - name: 'Publish Outputs to PR'
        uses: actions/github-script@v7
        env:
          JSON_OUTPUTS: ${{ steps.get_outputs.outputs.stdout }}
        with:
          script: |
            const outputs = JSON.parse(process.env.JSON_OUTPUTS);
            
            let body = `### âœ… Deployment Complete for \`${{ needs.plan-and-request-approval.outputs.tf_workspace }}\`\n\n**Project Outputs:**\n\n`;
            
            if (Object.keys(outputs).length === 0) {
              body += 'No outputs were generated.';
            } else {
              body += '| Name | Value |\n';
              body += '|---|---|\n';
              
              for (const key in outputs) {
                const output = outputs[key];
                const displayValue = output.sensitive ? '(sensitive)' : JSON.stringify(output.value);
                body += `| ${key} | \`\`\`${displayValue}\`\`\` |\n`;
              }
            }
            github.rest.issues.createComment({
              issue_number: ${{ needs.plan-and-request-approval.outputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });